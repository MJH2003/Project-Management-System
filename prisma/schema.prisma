generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  name           String
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  assignedTasks  Task[]          @relation("TaskAssignee")
  ownedProjects  Project[]       @relation("ProjectOwner")
  projectMembers ProjectMember[]
}

model Project {
  id          String          @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  tasks       Task[]
  members     ProjectMember[]
  CustomField CustomField[]
}

model ProjectMember {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  role      String   @default("MEMBER")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId])
}

model Task {
  id             String           @id @default(uuid())
  title          String
  description    String?
  status         TaskStatus       @default(TODO)
  priority       Priority         @default(MEDIUM)
  projectId      String
  project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId     String?
  assignee       User?            @relation("TaskAssignee", fields: [assigneeId], references: [id])
  dueDate        DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  TaskFieldValue TaskFieldValue[]
}

model CustomField {
  id         String    @id @default(uuid())
  projectId  String
  name       String
  type       FieldType
  isRequired Boolean   @default(false)

  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  values    TaskFieldValue[]
  options   Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model TaskFieldValue {
  id      String @id @default(uuid())
  taskId  String
  fieldId String
  value   Json

  task  Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  field CustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([taskId, fieldId])
}

enum FieldType {
  STRING
  NUMBER
  DATE
  BOOLEAN
  SELECT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
